[{"title":"SpringCloud入门Demo","url":"/2019/01/09/SpringCloud入门Demo/","content":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*Demo\b需要建3个SpringBoot项目，一个作为Eureka注册中心，其余2个作为客户端和服务端相互调用（Springboot项目建立过程省略）*\n\n### 代码见：https://github.com/geekzhi/springcloud-demo\n\n## Eureka\n\bpom.xml添加依赖：\n```\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n```\n\bapplication.yml配置文件：\n```\nserver:\n  port: 8761\n\neureka:\n  instance:\n    hostname: localhost\n  client:\n    # 以下两项一定要是false，表明自己是服务器，而不需要从其他主机发现服务\n    registerWithEureka: false\n    fetchRegistry: false\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n  server:\n    waitTimeInMsWhenSyncEmpty: 0\n    enable-self-preservation: false\n```\n启动类添加@EnableEurekaServer注解：\n```\n@SpringBootApplication\n@EnableEurekaServer\npublic class EurekaApplication {\n\n\tpublic static void main(String[] args) {\n\t    SpringApplication.run(EurekaApplication.class, args);\n\t}\n}\n```\n\n## server1\npom.xml添加依赖：\n```\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-feign</artifactId>\n\t<version>1.4.4.RELEASE</version>\n</dependency>\n\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-test</artifactId>\n\t<scope>test</scope>\n</dependency>\n```\n\bapplication.yml配置文件：\n```\nserver:\n  port: 8080\n\nspring:\n  application:\n    name: server1\n\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka\n    fetch-registry: true\n```\n连接类Clients,调用server2：\n```\n@FeignClient(\"server2\")\npublic interface Clients {\n\n    @RequestMapping(\"/test\")\n    String test();\n}\n```\n\nController:\n```\n@RestController\npublic class TestController {\n\n    @Autowired\n    private Clients clients;\n\n    @RequestMapping(\"/test\")\n    public String test() {\n        return \"This is server1\";\n    }\n\n    @RequestMapping(\"/client\")\n    public String client() {\n        return clients.test();\n    }\n}\n\n```\n\n启动类加注解@EnableDiscoveryClient、@EnableFeignClients：\n```\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class Server1Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Server1Application.class, args);\n\t}\n\n}\n```\n\n## server2 \n### 与server1基本一致\npom.xml添加依赖：\n```\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-feign</artifactId>\n\t<version>1.4.4.RELEASE</version>\n</dependency>\n\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-test</artifactId>\n\t<scope>test</scope>\n</dependency>\n```\n\bapplication.yml配置文件：\n```\nserver:\n  port: 8081\n\nspring:\n  application:\n    name: server2\n\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka\n    fetch-registry: true\n```\n连接类Clients,调用server1：\n```\n@FeignClient(\"server1\")\npublic interface Clients {\n\n    @RequestMapping(\"/test\")\n    String test();\n}\n```\n\nController:\n```\n@RestController\npublic class TestController {\n\n    @Autowired\n    private Clients clients;\n\n    @RequestMapping(\"/test\")\n    public String test() {\n        return \"This is server2\";\n    }\n\n    @RequestMapping(\"/client\")\n    public String client() {\n        return clients.test();\n    }\n}\n\n```\n\n启动类加注解@EnableDiscoveryClient、@EnableFeignClients：\n```\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class Server2Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Server2Application.class, args);\n\t}\n\n}\n```\n\n先启动eureka项目，再启动server1、server2，访问<http://localhost:8761>可以查看eureka注册中心注册的服务情况，访问<http://localhost:8080/client>看到“This is server2\"说明server1调用server2成功，同理，访问<http://localhost:8081/client>看到“This is server1\"说明server2调用server1成功","tags":["java"],"categories":["java"]},{"title":"Eclipse搭建springboot项目","url":"/2018/10/14/Eclipse搭建springboot项目/","content":"\n## 1、按如下步骤安装sts插件\n\n<!--more-->\n![](Eclipse搭建springboot项目/1.png)\n\n![](Eclipse搭建springboot项目/2.png)\n\n![](Eclipse搭建springboot项目/3.png)\n\n![](Eclipse搭建springboot项目/4.png)\n\n![](Eclipse搭建springboot项目/5.png)\n\n![](Eclipse搭建springboot项目/6.png)\n\n![](Eclipse搭建springboot项目/7.png)\n\n## 2、安装完插件后，新建springboot项目\n\n![](Eclipse搭建springboot项目/8.png)\n\n![](Eclipse搭建springboot项目/9.png)\n\n![](Eclipse搭建springboot项目/10.png)\n\n![](Eclipse搭建springboot项目/11.png)\n\n### 项目结构：\n\n![](Eclipse搭建springboot项目/12.png)"},{"title":"web开发","url":"/2018/10/14/web开发/","content":"# 分享内容\n## **一、web开发**\nCS，即Client/Server(客户机/服务器)\n\nBS，即Browser/Server(浏览器/服务器)\n\n### **BS开发发展历程：**\n<!--more-->\n&emsp;&emsp;静态 Web页面：由文本编辑器直接编辑并生成静态的HTML页面，如果要修改Web页面的内容，就需要再次编辑HTML源文件，早期的互联网Web页面就是静态的 \n\n\n&emsp;&emsp;ASP/JSP/PHP：ASP是微软推出的用VBScript脚本编程的Web开发技术，而JSP用Java来编写脚本，PHP本身则是开源的脚本语言。\n\n&emsp;&emsp;MVC：为了解决直接用脚本语言嵌入HTML导致的可维护性差的问题，Web应用也引入了Model-View-Controller的模式，来简化Web开发。Java的SSM、SSH框架。\n\n&emsp;&emsp;RESTful架构，EST全称是Representational State Transfer，中文意思是表述性状态转移。GET、POST、DELETE、PUT四种请求方式对应不同的功能，GET用来获取资源，POST用来创建资源，DELETE删除资源，PUT更新资源。举个例子： \b假设一个网站网址为：www.a.com, 如果我想获取用户名为“john”的用户信息，那么我请求的url应该为：“www.a.com/userInfo/john”, 请求方式为GET，对应的后端接口为“www.a.com/userInfo/{username}” 。\n\n### **MVC**\n\n&emsp;&emsp;MVC是一种经典的设计模式，Model-View-Controller，即模型-视图-控制器。M主要负责数据与模型，V主要负责显示，C主要负责交互与业务。\n如用户发送一个HTTP请求，此时该请求首先会进入控制器，然后控制器去获取数据并将其封装为模型，最后将模型传递到视图中进行展现。\n\n![1.png](web开发/1.png)\n\nMVC:\n\n![mvc原版](web开发/mvc原版.png)\n\n改进：\n\n![mvc改进](web开发/MVC改进.png)\n### 额外的一些补充\n\n**XML**(Extensible Markup Language),可扩展标记语言,是一种标记语言，很类似 HTML,设计宗旨是传输数据，而非显示数据，标签没有被预定义，需要自行定义标签。\n```\n<note>\n    <to>George</to>\n    <from>John</from>\n    <heading>Reminder</heading>\n    <body>Don't forget the meeting!</body>\n</note>\n```\n\n**JSON**(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式，对象表示为键值对、数据由逗号分隔、花括号保存对象、方括号保存数组。\n```\n    {\n        \"username\":\"john\",\n        \"password\":\"123\"\n    }\n```\n\n```\n     [{\n        \"username\":\"john\",\n        \"password\":\"123\"\n     },\n     {\n         \"username\":\"tom\",\n         \"password\":\"456\"\n     }]\n```\n**SSH框架，SSM框架** \n\nSpring，它是一个容器框架，用来装javabean（java对象），中间层框架（万能胶）可以起一个连接作用，比如说把Struts和hibernate粘合在一起运用。简单来说，Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。\n\nStruts,SpringMVC\n\nHibernate,Mybatis\n\n&emsp;&emsp;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。\n\n## **二、Spring、SpringMVC、SpringBoot常用注解**\n\n&emsp;&emsp;注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。\n\n&emsp;&emsp;元注解,是可以注解到注解上的注解,有 @Retention、@Documented、@Target、@Inherited、@Repeatable、@Native 6 种。\n\n&emsp;&emsp;Java中的注解：@Override 提示子类要复写父类中被 @Override 修饰的方法\n\n![注解](web开发/注解.png)\n\n**@Bean**\n\n&emsp;&emsp; Bean简单的讲，就一个类。在类上加上@Bean注解，表示交给Spring去管理。\n\n**@Autowired**\n\n&emsp;&emsp; 翻译：自动装配。默认按类型匹配的方式，在容器查找匹配的Bean，当有且仅有一个匹配的Bean时，Spring将其注入@Autowired标注的变量中。\n\n```\npublic class My {\n    private Test test = new Test();\n}\n\n---------------对比----------------\n\npublic class My{\n\n    @Autowired\n    private Test test;\n\n}   \n```\n\n**@Controller**\n\n&emsp;&emsp;表现层的Bean\n\n**@ResponseBody**\n\n&emsp;&emsp;该注解用于将Controller的方法返回的对象，通过适当的转换为指定格式后，写入到Response对象的body数据区。适用于返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；\n\n**@RequestMapping**\n\n&emsp;&emsp;是一个用来处理请求地址映射的注解。\n\n&emsp;&emsp;value：指定请求的实际地址\n\n&emsp;&emsp;method：指定请求的method类型， GET、POST、PUT、DELETE等；\n\n```\n@Controller\npublic class TestController {\n\t\n\t@Autowired\n\tMyService myService;\n\t\n\t@RequestMapping(value= \"/\", method = RequestMethod.GET)\n\tpublic void  doSomething() {\n\t\t//doSomething;\n\t}\n\n}\n```\n\n**@Service**\n\n&emsp;&emsp;业务层的Bean\n\n## **三、Maven、Mybatis、SpringBoot**\n\n**Maven**\n\nJava三大构建工具：Ant、Maven和Gradle。\n\nMaven的主要功能主要分为5点，分别是依赖管理系统、多模块构建、一致的项目结构、一致的构建模型和插件机制。\n\n常用命令：\n\n```\n编译：mvn compile　 　 --src/main/java目录java源码编译生成class （target目录下）\n测试：mvn test　　　   --src/test/java 目录编译\n清理：mvn clean　　　  --删除target目录，也就是将class文件等删除\n打包：mvn package　   --生成压缩文件：java项目#jar包；web项目#war包，也是放在target目录下\n安装：mvn install　　  --将压缩文件(jar或者war)上传到本地仓库\n发布：mvn deploy      --将压缩文件上传私服\n```\n\n资料：https://www.cnblogs.com/whgk/p/7112560.html\n\n\n**Mybatis**\n\n参考资料：\nhttp://www.mybatis.org/mybatis-3/zh/index.html\n\n```\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n```\n**SpringBoot**\n\n>&emsp;&emsp;Spring Boot is the starting point for building all Spring-based applications. Spring Boot is designed to get you up and running as quickly as possible, with minimal upfront configuration of Spring.\n\n>&emsp;&emsp;Spring Bug是构建基于Spring的应用程序的起点。Spring Bug的设计是为了让你尽可能快地用最小的配置启动起来你的Spring程序。","tags":["java"],"categories":["java"]},{"title":"git创建分支","url":"/2017/12/22/git创建分支/","content":"```bash\n\tgit new \"name\"\n\tgit checkout \"name\"\n\tgit push origin \"name\"\n```\n\n","tags":["git"]},{"title":"Springboot集成Mybatis（采用XML方式）","url":"/2017/12/22/Springboot集成Mybatis（采用XML方式）/","content":"# Springboot集成Mybatis\n## 1.添加依赖\n```xml\n<dependency> \n\t<groupId>org.mybatis.spring.boot</groupId>\n\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t<version>1.1.1</version>\n</dependency>\n```\n<!--more-->\n## 2.修改配置文件（application.properties）\n```\n\tmybatis.config-locations=classpath:mybatis/mybatis-config.xml\n\tmybatis.mapper-locations=classpath:mybatis/mapper/*.xml \n\t\n\tspring.datasource.driverClassName = com.mysql.jdbc.Driver\n\tspring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8\n\tspring.datasource.username = root\n\tspring.datasource.password = root\n```\n 给一个mybatis-config.xml的模板\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\t<settings>\n\t\t<setting name=\"callSettersOnNulls\" value=\"true\"/>\n\t\t\n\t\t<setting name=\"cacheEnabled\" value=\"true\"/>\n\t\t\n\t\t<setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n\t\t\n\t\t<setting name=\"aggressiveLazyLoading\" value=\"true\"/>\n\t\t\n\t\t<setting name=\"multipleResultSetsEnabled\" value=\"true\"/>\n\t\t\n\t\t<setting name=\"useColumnLabel\" value=\"true\"/>\n\t\t\n\t\t<setting name=\"useGeneratedKeys\" value=\"false\"/>\n\t\t\n\t\t<setting name=\"autoMappingBehavior\" value=\"PARTIAL\"/>\n\t\t\n\t\t<setting name=\"defaultExecutorType\" value=\"SIMPLE\"/>\n\t\t\n\t\t<setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n\t\t\n        <setting name=\"localCacheScope\" value=\"SESSION\"/>\n\t\t\n        <setting name=\"jdbcTypeForNull\" value=\"NULL\"/>\n\t\t\n\t</settings>\n\n\t<typeAliases>\n\t\t<typeAlias alias=\"Integer\" type=\"java.lang.Integer\" />\n\t\t<typeAlias alias=\"Long\" type=\"java.lang.Long\" />\n\t\t<typeAlias alias=\"HashMap\" type=\"java.util.HashMap\" />\n\t\t<typeAlias alias=\"LinkedHashMap\" type=\"java.util.LinkedHashMap\" />\n\t\t<typeAlias alias=\"ArrayList\" type=\"java.util.ArrayList\" />\n\t\t<typeAlias alias=\"LinkedList\" type=\"java.util.LinkedList\" />\n\t</typeAliases>\n</configuration>\n```\n# 3.在启动类上加@MapperScan注解\n```java\n@SpringBootApplication\n@MapperScan(\"com.kerry.mapper\")\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n}\n```\n在每个Mapper加@Mapper注解也行，不过比较麻烦\n\n","tags":["java mybatis"],"categories":["java"]},{"title":"Springboot访问HTML页面","url":"/2017/12/22/Springboot访问HTML页面/","content":"# Springboot访问HTML页面\n## 1.导包\nmaven:\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-thymeleaf</artifactId>\n  <version>1.5.9.RELEASE</version>\n</dependency>\n```\ngradle:\n`compile 'org.springframework.boot:spring-boot-starter-thymeleaf:1.5.9.RELEASE'`\n<!--more-->\n## 2.修改配置文件（application.properties）\n`spring.thymeleaf.prefix: classpath:/templates/`\n\n**然后如果你的html标签格式不标准，会报这个错误：**\n`thymeleaf Exception parsing document: template=\"xxxx\"`\n需要再加个依赖：\n```xml\n<dependency>\n    <groupId>net.sourceforge.nekohtml</groupId>\n    <artifactId>nekohtml</artifactId>\n    <version>1.9.22</version>\n</dependency>\n```\n以及配置文件（application.properties）：\n`spring.thymeleaf.mode=LEGACYHTML5`\n\n\n\n\n\n","tags":["java"],"categories":["java"]}]